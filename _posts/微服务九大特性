## 特性二：围绕“业务功能”组织团队

团队组织方式---传统从技术层面
用户界面团队、服务器端团队和数据库团队
变更

---微服务从业务层面
全栈、自组织
一方面可以有效减少服务内部修改所产生的内耗；另一方面，团队边界可以变得更为清晰。

## 特性三：“做产品”而不是“做项目”
奶妈和亲娘
一个团队在一个产品的整个生命周期中都应该保持对其拥有
一个开发团队对一个在生产环境下运行的软件负全责

微服务：更好更便于掌握和维护

## 特性四：“智能端点”与“傻瓜管道”
与ESB形成对比（中心化和哑服务）
像经典Unix的“过滤器”(filter)那样来工作
第一种，使用HTTP协议的RESTful API或轻量级的消息发送协议，来实现信息传递与服务调用的触发。
第二种，通过在轻量级消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的结构。

## 特性五：“去中心化”地治理技术
采用轻量级的契约定义接口
不是每一个问题都是钉子，不是每一个方案都是锤子
技术异构

## 特性六：“去中心化”地管理数据
每一个服务来管理其自有的数据库
数据库中的存储内容拆分到新的同平台的其他数据库实例中
对一些具有特殊结构或业务特性的数据存储到一些其他技术的数据库实例中
数据一致性也成为“微服务”架构中急需解决的问题之一，强调最终一致性

## 特性七：“基础设施”自动化
背景：云计算、容器技术以及DevOps，程序大爆炸
必须一开始就构建起“持续交付”平台来支撑整个实施过程
自动化测试：每次部署前的强心剂，尽可能的获得对正在运行软件的信心。
自动化部署：解放繁琐枯燥的重复操作以及对多环境的配置管理。

## 特性八：“容错”设计
微服务也会“一挂全挂”
故障检测
自动恢复

## 特性九：“演进式”设计
控制变化并不一定意味着要减少变化
一个组件的关键属性，是具有独立更换和升级的特点
可更换性
缺点是：必须要考虑当一个服务发生变化时，依赖它并对其进行消费的其他服务将无法工作

参考资料：
1.https://mp.weixin.qq.com/s?__biz=MjM5MjEwNTEzOQ==&mid=401500724&idx=1&sn=4e42fa2ffcd5732ae044fe6a387a1cc3#rd
2.http://blog.didispace.com/20160917-microservices-note/
